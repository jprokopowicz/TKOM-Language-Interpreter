number iterativePower(number base, number power) {
    if([power == 0]) {
        return 1;
    }
    if([1 % power == power]) {
        return 0;
    }
    number counter;
    counter = 0;
    number result;
    result = 1;
    loop ([counter < power]) {
        result = result * base;
        counter = counter + 1;
    }
    return result;
}
number recursivePower(number base, number power);
number recursivePower(number base, number power) {
    if([power == 0]) {
        return 1;
    }
    if([1 % power == power] | [power < 0]) {
        return 0;
    }
    if([power == 1]) {
        return base;
    }
    return base * recursivePower(base, power - 1);
}

bool someBooleanFunction(bool a, bool b, bool c, number d, number e){
    return  (a & (b | ![d <= e] ) & c);
}

number someNumericFunction(bool ok) {
    if(ok) {
        return 1:3 + (2 * 1 + 2) * (1 + 2);
    } else {
        return 0;
    }
}

string main() {
    bool sayHello;
    sayHello = someBooleanFunction(true, [1:2 > 2:3], [1 > 3:5], 1#2:5, 1:10);
    if(sayHello) {
        bool ok;
        ok = true;
        loop([12#1:3 == someNumericFunction(ok)]){
            write string "Hello, calculating power by iteration and recursion\n";
            ok = false;
        }
    }

    number a;
    write string "enter base:";
    read a;
    number b;
    write string "enter power:"
    ;read  b;
    number resIterative;
    resIterative = iterativePower(a, b);
    write string "Iterative result: ";
    write number resIterative;
    write string "\n";
    number resRec;
    resRec = recursivePower(a, b);
    write string "Recursive result: ";
    write number resRec;
    write string "\n";
    if([resIterative == resRec]) {
        return "success";
    } else {
        return "fail";
    }
}